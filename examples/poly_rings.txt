// Requires : cc.redberry#rings;2.5.7

import scala.language.implicitConversions
import cc.redberry.rings.poly.multivar.MonomialOrder
import cc.redberry.rings.poly.multivar.MultivariatePolynomial
import rings.{Z, BigInteger, MultivariatePolynomialRing, poly2scas, id, coef2poly, int2bigInt}

given r as MultivariatePolynomialRing[BigInteger] = MultivariatePolynomialRing(3, Z, MonomialOrder.LEX)
val Array(x, y, z) = r.gens

given s as MultivariatePolynomialRing[MultivariatePolynomial[BigInteger]] = MultivariatePolynomialRing(1, r, MonomialOrder.LEX)
val Array(a) = s.gens
val t = poly2scas(s)
import t.+

assert(BigInteger(1) + 1 >< 1 + BigInteger(1))
assert(x + 1 >< 1 + x)
assert(x + BigInteger(1) >< BigInteger(1) + x)
assert(a + 1 >< 1 + a)
assert(a + BigInteger(1) >< BigInteger(1) + a)
assert(a + x >< x + a)
