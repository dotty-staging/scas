import scala.language.experimental.genericNumberLiterals
import scas.{BigInteger, int2bigInt}
import scas.rendering.MathObject
import scas.power.Lexicographic
import scas.polynomial.TreePolynomial
import TreePolynomial.coef2poly
import BigInteger.given

assert(BigInteger(1) + 1 >< 1 + BigInteger(1))
{
  val r = new TreePolynomial(using BigInteger, Lexicographic[Int]("x", "y", "z"))
  val List(x, y, z) = r.generators.toList
  import r.given

  assert(x + 1 >< 1 + x)
  assert(x + BigInteger(1) >< BigInteger(1) + x)
  {
    val s = new TreePolynomial(using r, Lexicographic[Int]("a"))
    val List(a) = s.generators.toList
    import s.given

    assert(a + 1 >< 1 + a)
    assert(a + BigInteger(1) >< BigInteger(1) + a)
    assert(a + x >< x+a)
    assert((a + x).show == "x+a")
    assert((a + x).math == s.math(x+a))
    assert(MathObject(a + x).toString == "x+a")
  }
}
